'use strict';

const kit = require('@nuxt/kit');

const cacheControl = (values) => (_req, res, next) => {
  const cacheControlValue = Object.entries(values).map(([key, value]) => `${key}=${value}`).join(",");
  res.setHeader("Cache-Control", cacheControlValue);
  next();
};
const createCacheControlMiddleware = (pageWithCacheHeaders) => {
  const pagePath = pageWithCacheHeaders[0];
  const cacheHeaders = pageWithCacheHeaders[1];
  return {
    path: pagePath,
    handler: cacheControl(cacheHeaders)
  };
};

const module$1 = kit.defineNuxtModule({
  name: "@nuxt-modules/cache",
  configKey: "cache",
  setup(options) {
    if (options.browser && !options.browser.pages.length) {
      throw new Error("Missing `browser.pages` option. Provide array of pages you want to apply cache to.");
    }
    if (options.browser && options.browser.pages.length) {
      options.browser.pages.forEach((page) => {
        if (typeof page[0] !== "string") {
          console.error("First element of page must be a `string`");
          return;
        }
        if (typeof page[1] !== "object") {
          console.error("Second element of page must be an `object`");
          return;
        }
        kit.addServerMiddleware(createCacheControlMiddleware(page));
      });
    }
  }
});

module.exports = module$1;
